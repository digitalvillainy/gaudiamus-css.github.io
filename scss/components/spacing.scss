
.container{
  max-width: calc(100% - 20px);
  margin: $baseSpacing auto;
}


@each $hw, $unit in $height-width-unit-map{
  @each $value in $height-width-value-map{
    .w-#{$value}#{$hw}{
      width: unquote($value+$unit);
    }
    .h-#{$value}#{$hw}{
      height: unquote($value+$unit);
    }
    @each $breakpoint, $value in $breakpoint-map {
      @media (min-width: $value) {
        .#{$breakpoint}\:w-#{$value}#{$hw}{
          width: unquote($value+$unit);
        }
        .#{$breakpoint}\:h-#{$value}#{$hw}{
          height: unquote($value+$unit);
        }
      }
    }
  }

}
@each $breakpoint, $value in $breakpoint-map {
  @media (min-width: $value) {
    .container{
      max-width: $value * .95;
      margin: 0 auto;
    }
  }
}

@each $position in $position-map{
  .#{$position-key}-#{$position}{position: unquote($position)}
  @each $breakpoint, $value in $breakpoint-map {
    @media (min-width: $value) {
      .#{$breakpoint}\:#{$position-key}-#{$position}{position: unquote($position)}
    }
  }
}


/* utility generator */


@mixin map-to-class($className,$property){
  @for $i from 1 through $numSpacingUnits{
    $class: unquote($className+'-'+$i);
    $calculatedProperty:'';
    .#{$class} {
      @each $j, $prop in $property{
        @if($calculatedProperty == ''){
          $calculatedProperty:$prop;
          @if($prop == null){
            #{$j}: unquote(($i * $spacingStep)+$spacingUnit);
          }
        } @else{
          $p: #{$calculatedProperty}-#{$prop};
          #{$p}: unquote(($i * $spacingStep)+$spacingUnit);
        }

      }

    }
  }
}

@each $property-class, $property in $property-map {
  @include map-to-class($property-class,$property);
  @each $breakpoint, $value in $breakpoint-map {
    @media (min-width: $value) {
      @include map-to-class('#{$breakpoint}\\:#{$property-class}',$property);
    }
  }
  @each $property-modifier, $property-addon in $shorthand-map{
    $class: $property-class + '-' + $property-modifier;
    $p-map:(0:$property);
    $p-end:();

    @if(type_of($property-addon) == 'map'){
      $p-end: map_merge($p-map,$property-addon);
    } @else {
      $p-end: map_merge($p-map,(1:$property-addon));
    }
    @include map-to-class($class,$p-end);
    @each $breakpoint, $value in $breakpoint-map {
      @media (min-width: $value) {
        @include map-to-class('#{$breakpoint}\\:#{$class}',$p-end);
      }
    }
  }
}